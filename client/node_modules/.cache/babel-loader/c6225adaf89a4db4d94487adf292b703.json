{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AngleUpdater = void 0;\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nfunction updateAngle(particle, delta) {\n  var _a;\n\n  const rotate = particle.rotate;\n\n  if (!rotate) {\n    return;\n  }\n\n  const rotateOptions = particle.options.rotate;\n  const rotateAnimation = rotateOptions.animation;\n  const speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n  const max = 2 * Math.PI;\n\n  if (!rotateAnimation.enable) {\n    return;\n  }\n\n  switch (rotate.status) {\n    case Enums_1.AnimationStatus.increasing:\n      rotate.value += speed;\n\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n\n      break;\n\n    case Enums_1.AnimationStatus.decreasing:\n    default:\n      rotate.value -= speed;\n\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n\n      break;\n  }\n}\n\nclass AngleUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const rotateOptions = particle.options.rotate;\n    particle.rotate = {\n      enable: rotateOptions.animation.enable,\n      value: (0, Utils_1.getRangeValue)(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        particle.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        particle.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = particle.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      particle.rotate.velocity = rotateAnimation.speed / 360 * this.container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        particle.rotate.velocity *= Math.random();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    const rotate = particle.options.rotate;\n    const rotateAnimation = rotate.animation;\n    return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateAngle(particle, delta);\n  }\n\n}\n\nexports.AngleUpdater = AngleUpdater;","map":{"version":3,"sources":["/Users/emad/Desktop/emadsaeed.com/client/node_modules/tsparticles/Updaters/Angle/AngleUpdater.js"],"names":["Object","defineProperty","exports","value","AngleUpdater","Enums_1","require","Utils_1","updateAngle","particle","delta","_a","rotate","rotateOptions","options","rotateAnimation","animation","speed","velocity","factor","max","Math","PI","enable","status","AnimationStatus","increasing","decreasing","constructor","container","init","getRangeValue","rotateDirection","direction","RotateDirection","random","index","floor","counterClockwise","clockwise","retina","reduceFactor","sync","isEnabled","destroyed","spawning","path","update"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AngleUpdater = void 0;\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_1 = require(\"../../Utils\");\nfunction updateAngle(particle, delta) {\n    var _a;\n    const rotate = particle.rotate;\n    if (!rotate) {\n        return;\n    }\n    const rotateOptions = particle.options.rotate;\n    const rotateAnimation = rotateOptions.animation;\n    const speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case Enums_1.AnimationStatus.increasing:\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n}\nclass AngleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: ((0, Utils_1.getRangeValue)(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                particle.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                particle.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = particle.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.velocity = (rotateAnimation.speed / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= Math.random();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        return !particle.destroyed && !particle.spawning && !rotate.path && rotateAnimation.enable;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAngle(particle, delta);\n    }\n}\nexports.AngleUpdater = AngleUpdater;\n"]},"metadata":{},"sourceType":"script"}