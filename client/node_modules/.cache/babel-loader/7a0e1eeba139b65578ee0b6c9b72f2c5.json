{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextDrawer = exports.validTypes = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nexports.validTypes = [\"text\", \"character\", \"char\"];\n\nclass TextDrawer {\n  getSidesCount() {\n    return 12;\n  }\n\n  async init(container) {\n    const options = container.actualOptions;\n\n    if (exports.validTypes.find(t => (0, Utils_1.isInArray)(t, options.particles.shape.type))) {\n      const shapeOptions = exports.validTypes.map(t => options.particles.shape.options[t]).find(t => !!t);\n\n      if (shapeOptions instanceof Array) {\n        const promises = [];\n\n        for (const character of shapeOptions) {\n          promises.push((0, Utils_1.loadFont)(character));\n        }\n\n        await Promise.allSettled(promises);\n      } else {\n        if (shapeOptions !== undefined) {\n          await (0, Utils_1.loadFont)(shapeOptions);\n        }\n      }\n    }\n  }\n\n  draw(context, particle, radius, opacity) {\n    var _a, _b, _c;\n\n    const character = particle.shapeData;\n\n    if (character === undefined) {\n      return;\n    }\n\n    const textData = character.value;\n\n    if (textData === undefined) {\n      return;\n    }\n\n    const textParticle = particle;\n\n    if (textParticle.text === undefined) {\n      textParticle.text = textData instanceof Array ? (0, Utils_1.itemFromArray)(textData, particle.randomIndexData) : textData;\n    }\n\n    const text = textParticle.text;\n    const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n    const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n    const size = Math.round(radius) * 2;\n    const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n    const fill = particle.fill;\n    const offsetX = text.length * radius / 2;\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    const pos = {\n      x: -offsetX,\n      y: radius / 2\n    };\n    context.globalAlpha = opacity;\n\n    if (fill) {\n      context.fillText(text, pos.x, pos.y);\n    } else {\n      context.strokeText(text, pos.x, pos.y);\n    }\n\n    context.globalAlpha = 1;\n  }\n\n}\n\nexports.TextDrawer = TextDrawer;","map":{"version":3,"sources":["/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/tsparticles/Shapes/Text/TextDrawer.js"],"names":["Object","defineProperty","exports","value","TextDrawer","validTypes","Utils_1","require","getSidesCount","init","container","options","actualOptions","find","t","isInArray","particles","shape","type","shapeOptions","map","Array","promises","character","push","loadFont","Promise","allSettled","undefined","draw","context","particle","radius","opacity","_a","_b","_c","shapeData","textData","textParticle","text","itemFromArray","randomIndexData","style","weight","size","Math","round","font","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextDrawer = exports.validTypes = void 0;\nconst Utils_1 = require(\"../../Utils\");\nexports.validTypes = [\"text\", \"character\", \"char\"];\nclass TextDrawer {\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (exports.validTypes.find((t) => (0, Utils_1.isInArray)(t, options.particles.shape.type))) {\n            const shapeOptions = exports.validTypes.map((t) => options.particles.shape.options[t]).find((t) => !!t);\n            if (shapeOptions instanceof Array) {\n                const promises = [];\n                for (const character of shapeOptions) {\n                    promises.push((0, Utils_1.loadFont)(character));\n                }\n                await Promise.allSettled(promises);\n            }\n            else {\n                if (shapeOptions !== undefined) {\n                    await (0, Utils_1.loadFont)(shapeOptions);\n                }\n            }\n        }\n    }\n    draw(context, particle, radius, opacity) {\n        var _a, _b, _c;\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        const textParticle = particle;\n        if (textParticle.text === undefined) {\n            textParticle.text =\n                textData instanceof Array ? (0, Utils_1.itemFromArray)(textData, particle.randomIndexData) : textData;\n        }\n        const text = textParticle.text;\n        const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n        const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n        const size = Math.round(radius) * 2;\n        const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n        const fill = particle.fill;\n        const offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n}\nexports.TextDrawer = TextDrawer;\n"]},"metadata":{},"sourceType":"script"}