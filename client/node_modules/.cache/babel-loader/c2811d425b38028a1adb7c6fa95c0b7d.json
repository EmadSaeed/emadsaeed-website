{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Vector_1 = require(\"./Particle/Vector\");\n\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\n\nconst fixOutMode = data => {\n  if ((0, Utils_1.isInArray)(data.outMode, data.checkModes) || (0, Utils_1.isInArray)(data.outMode, data.checkModes)) {\n    if (data.coord > data.maxCoord - data.radius * 2) {\n      data.setCb(-data.radius);\n    } else if (data.coord < data.radius * 2) {\n      data.setCb(data.radius);\n    }\n  }\n};\n\nclass Particle {\n  constructor(id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    const pxRatio = container.retina.pixelRatio;\n    const mainOptions = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? (0, Utils_1.itemFromArray)(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? (0, Utils_1.itemFromArray)(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = (0, Utils_1.getValue)(this.options.move.path.delay) * 1000;\n    const zIndexValue = (0, Utils_1.getRangeValue)(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n          sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: (0, Utils_1.getValue)(sizeOptions) * container.retina.pixelRatio,\n      max: (0, Utils_1.getRangeMax)(sizeRange) * pxRatio,\n      min: (0, Utils_1.getRangeMin)(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: sizeOptions.animation.count\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = (0, Utils_1.randomInRange)(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = (0, Utils_1.getParticleDirectionAngle)(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - (0, Utils_1.getRangeValue)(this.options.move.decay);\n    this.position = this.calcPosition(container, position, (0, Utils_1.clamp)(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n\n    if (this.options.move.spin.enable) {\n      const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = (0, Utils_1.getDistance)(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : (0, Utils_1.getRangeValue)(this.options.move.spin.acceleration)\n      };\n    }\n\n    this.shadowColor = (0, Utils_1.colorToRgb)(this.options.shadow.color);\n\n    for (const updater of container.particles.updaters) {\n      if (updater.init) {\n        updater.init(this);\n      }\n    }\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n\n  isInsideCanvas() {\n    const radius = this.getRadius();\n    const canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    var _a;\n\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n\n  getFillColor() {\n    var _a, _b, _c;\n\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.color);\n\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n\n        if (this.roll.alter) {\n          return (0, Utils_1.alterHsl)(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n\n    return color;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n\n    this.size.loops = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = (0, Utils_1.getRangeValue)(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    var _a, _b, _c, _d, _e, _f;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const radius = this.getRadius();\n\n    const outModes = this.options.move.outModes,\n          fixHorizontal = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceHorizontal],\n        coord: pos.x,\n        maxCoord: container.canvas.size.width,\n        setCb: value => pos.x += value,\n        radius\n      });\n    },\n          fixVertical = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceVertical],\n        coord: pos.y,\n        maxCoord: container.canvas.size.height,\n        setCb: value => pos.y += value,\n        radius\n      });\n    };\n\n    fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n    fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n    fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n    fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions;\n    const radius = this.getRadius();\n\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n\n    const overlapOptions = collisionsOptions.overlap;\n\n    if (overlapOptions.enable) {\n      return false;\n    }\n\n    const retries = overlapOptions.retries;\n\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n\n    let overlaps = false;\n\n    for (const particle of this.container.particles.array) {\n      if ((0, Utils_1.getDistance)(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n\n    return overlaps;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = (0, Utils_1.getParticleBaseVelocity)(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return (0, Utils_1.deepExtend)({}, shapeData instanceof Array ? (0, Utils_1.itemFromArray)(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? (0, Utils_1.getRangeValue)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? (0, Utils_1.getRangeValue)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n\n    return life;\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/tsparticles/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","fixOutMode","data","isInArray","outMode","checkModes","coord","maxCoord","radius","setCb","constructor","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","options","pathDelay","getValue","move","path","delay","zIndexValue","getRangeValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","getRangeMax","min","getRangeMin","loops","maxLoops","count","sizeAnimation","status","AnimationStatus","increasing","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","moveDecay","decay","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","width","height","pos","getPosition","distance","getDistance","center","RotateDirection","clockwise","counterClockwise","angle","acceleration","spinAcceleration","shadowColor","colorToRgb","shadow","color","updater","updaters","init","particleInit","plugin","plugins","particleCreated","isVisible","isInsideCanvas","getRadius","canvasSize","draw","delta","drawParticlePlugin","drawParticle","getMass","PI","getFillColor","getHslFromAnimation","roll","backColor","alter","rolled","floor","alterHsl","getStrokeColor","strokeColor","destroy","override","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","Vector3d","create","outModes","fixHorizontal","OutMode","bounce","bounceHorizontal","fixVertical","bounceVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","straight","setRangeValue","speed","length","deepExtend","lifeOptions","delayTime","duration","time"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nconst fixOutMode = (data) => {\n    if ((0, Utils_1.isInArray)(data.outMode, data.checkModes) || (0, Utils_1.isInArray)(data.outMode, data.checkModes)) {\n        if (data.coord > data.maxCoord - data.radius * 2) {\n            data.setCb(-data.radius);\n        }\n        else if (data.coord < data.radius * 2) {\n            data.setCb(data.radius);\n        }\n    }\n};\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const mainOptions = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? (0, Utils_1.itemFromArray)(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? (0, Utils_1.itemFromArray)(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = (0, Utils_1.getValue)(this.options.move.path.delay) * 1000;\n        const zIndexValue = (0, Utils_1.getRangeValue)(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: (0, Utils_1.getValue)(sizeOptions) * container.retina.pixelRatio,\n            max: (0, Utils_1.getRangeMax)(sizeRange) * pxRatio,\n            min: (0, Utils_1.getRangeMin)(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: sizeOptions.animation.count,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = (0, Utils_1.randomInRange)(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = (0, Utils_1.getParticleDirectionAngle)(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - (0, Utils_1.getRangeValue)(this.options.move.decay);\n        this.position = this.calcPosition(container, position, (0, Utils_1.clamp)(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = (0, Utils_1.getDistance)(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : (0, Utils_1.getRangeValue)(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = (0, Utils_1.colorToRgb)(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b, _c;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return (0, Utils_1.alterHsl)(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = (0, Utils_1.getRangeValue)(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d, _e, _f;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const radius = this.getRadius();\n        const outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceHorizontal],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceVertical],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n        fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n        fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n        fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions;\n        const radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if ((0, Utils_1.getDistance)(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = (0, Utils_1.getParticleBaseVelocity)(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return (0, Utils_1.deepExtend)({}, shapeData instanceof Array ? (0, Utils_1.itemFromArray)(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? (((0, Utils_1.getRangeValue)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? (((0, Utils_1.getRangeValue)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}