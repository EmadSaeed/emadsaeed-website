{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceColorSvg = exports.downloadSvgImage = exports.loadImage = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nfunction loadImage(source) {\n  return new Promise(function (resolve, reject) {\n    if (!source) {\n      reject(\"Error tsParticles - No image.src\");\n      return;\n    }\n\n    var image = {\n      source: source,\n      type: source.substr(source.length - 3)\n    };\n    var img = new Image();\n    img.addEventListener(\"load\", function () {\n      image.element = img;\n      resolve(image);\n    });\n    img.addEventListener(\"error\", function () {\n      reject(\"Error tsParticles - loading image: \".concat(source));\n    });\n    img.src = source;\n  });\n}\n\nexports.loadImage = loadImage;\n\nfunction downloadSvgImage(_x) {\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nfunction _downloadSvgImage() {\n  _downloadSvgImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n    var image, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (source) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error(\"Error tsParticles - No image.src\");\n\n          case 2:\n            image = {\n              source: source,\n              type: source.substr(source.length - 3)\n            };\n\n            if (!(image.type !== \"svg\")) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", loadImage(source));\n\n          case 5:\n            _context.next = 7;\n            return fetch(image.source);\n\n          case 7:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error(\"Error tsParticles - Image not found\");\n\n          case 10:\n            _context.next = 12;\n            return response.text();\n\n          case 12:\n            image.svgData = _context.sent;\n            return _context.abrupt(\"return\", image);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nexports.downloadSvgImage = downloadSvgImage;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  if (svgData.includes(\"fill\")) {\n    var currentColor = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n    return svgData.replace(currentColor, function () {\n      return (0, Utils_1.getStyleFromHsl)(color, opacity);\n    });\n  }\n\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat((0, Utils_1.getStyleFromHsl)(color, opacity), \"\\\"\").concat(svgData.substring(preFillIndex));\n}\n\nexports.replaceColorSvg = replaceColorSvg;","map":{"version":3,"sources":["/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/tsparticles/Shapes/Image/Utils.js"],"names":["Object","defineProperty","exports","value","replaceColorSvg","downloadSvgImage","loadImage","Utils_1","require","source","Promise","resolve","reject","image","type","substr","length","img","Image","addEventListener","element","src","Error","fetch","response","ok","text","svgData","imageShape","color","opacity","includes","currentColor","replace","getStyleFromHsl","preFillIndex","indexOf","substring"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceColorSvg = exports.downloadSvgImage = exports.loadImage = void 0;\nconst Utils_1 = require(\"../../Utils\");\nfunction loadImage(source) {\n    return new Promise((resolve, reject) => {\n        if (!source) {\n            reject(\"Error tsParticles - No image.src\");\n            return;\n        }\n        const image = {\n            source: source,\n            type: source.substr(source.length - 3),\n        };\n        const img = new Image();\n        img.addEventListener(\"load\", () => {\n            image.element = img;\n            resolve(image);\n        });\n        img.addEventListener(\"error\", () => {\n            reject(`Error tsParticles - loading image: ${source}`);\n        });\n        img.src = source;\n    });\n}\nexports.loadImage = loadImage;\nasync function downloadSvgImage(source) {\n    if (!source) {\n        throw new Error(\"Error tsParticles - No image.src\");\n    }\n    const image = {\n        source: source,\n        type: source.substr(source.length - 3),\n    };\n    if (image.type !== \"svg\") {\n        return loadImage(source);\n    }\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        throw new Error(\"Error tsParticles - Image not found\");\n    }\n    image.svgData = await response.text();\n    return image;\n}\nexports.downloadSvgImage = downloadSvgImage;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    if (svgData.includes(\"fill\")) {\n        const currentColor = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n        return svgData.replace(currentColor, () => (0, Utils_1.getStyleFromHsl)(color, opacity));\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${(0, Utils_1.getStyleFromHsl)(color, opacity)}\"${svgData.substring(preFillIndex)}`;\n}\nexports.replaceColorSvg = replaceColorSvg;\n"]},"metadata":{},"sourceType":"script"}