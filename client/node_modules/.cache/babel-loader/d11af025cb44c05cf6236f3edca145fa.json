{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nvar ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nvar Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nvar Enums_1 = require(\"../Enums\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar Vector_1 = require(\"./Particle/Vector\");\n\nvar Vector3d_1 = require(\"./Particle/Vector3d\");\n\nvar fixOutMode = function fixOutMode(data) {\n  if ((0, Utils_1.isInArray)(data.outMode, data.checkModes) || (0, Utils_1.isInArray)(data.outMode, data.checkModes)) {\n    if (data.coord > data.maxCoord - data.radius * 2) {\n      data.setCb(-data.radius);\n    } else if (data.coord < data.radius * 2) {\n      data.setCb(data.radius);\n    }\n  }\n};\n\nvar Particle = /*#__PURE__*/function () {\n  function Particle(id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    var pxRatio = container.retina.pixelRatio;\n    var mainOptions = container.actualOptions;\n    var particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    var shapeType = particlesOptions.shape.type;\n    var reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? (0, Utils_1.itemFromArray)(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? (0, Utils_1.itemFromArray)(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      var shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = (0, Utils_1.getValue)(this.options.move.path.delay) * 1000;\n    var zIndexValue = (0, Utils_1.getRangeValue)(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    var sizeOptions = this.options.size,\n        sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: (0, Utils_1.getValue)(sizeOptions) * container.retina.pixelRatio,\n      max: (0, Utils_1.getRangeMax)(sizeRange) * pxRatio,\n      min: (0, Utils_1.getRangeMin)(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: sizeOptions.animation.count\n    };\n    var sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = (0, Utils_1.randomInRange)(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = (0, Utils_1.getParticleDirectionAngle)(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - (0, Utils_1.getRangeValue)(this.options.move.decay);\n    this.position = this.calcPosition(container, position, (0, Utils_1.clamp)(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    var particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    var drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n\n    if (this.options.move.spin.enable) {\n      var spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : {\n        x: 50,\n        y: 50\n      };\n      var spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      var pos = this.getPosition();\n      var distance = (0, Utils_1.getDistance)(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : (0, Utils_1.getRangeValue)(this.options.move.spin.acceleration)\n      };\n    }\n\n    this.shadowColor = (0, Utils_1.colorToRgb)(this.options.shadow.color);\n\n    var _iterator = _createForOfIteratorHelper(container.particles.updaters),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var updater = _step.value;\n\n        if (updater.init) {\n          updater.init(this);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    var _iterator2 = _createForOfIteratorHelper(container.plugins),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            plugin = _step2$value[1];\n\n        if (plugin.particleCreated) {\n          plugin.particleCreated(this);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  _createClass(Particle, [{\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius();\n      var canvasSize = this.container.canvas.size;\n      return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n\n      var _iterator3 = _createForOfIteratorHelper(container.plugins),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              plugin = _step3$value[1];\n\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _a;\n\n      return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a, _b, _c;\n\n      var color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.color);\n\n      if (color && this.roll && (this.backColor || this.roll.alter)) {\n        var rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n\n        if (rolled) {\n          if (this.backColor) {\n            return this.backColor;\n          }\n\n          if (this.roll.alter) {\n            return (0, Utils_1.alterHsl)(color, this.roll.alter.type, this.roll.alter.value);\n          }\n        }\n      }\n\n      return color;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(override) {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      if (this.unbreakable) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.bubble.inRange = false;\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      if (override) {\n        return;\n      }\n\n      var destroyOptions = this.options.destroy;\n\n      if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n        this.split();\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.opacity) {\n        this.opacity.loops = 0;\n      }\n\n      this.size.loops = 0;\n    }\n  }, {\n    key: \"split\",\n    value: function split() {\n      var splitOptions = this.options.destroy.split;\n\n      if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n        return;\n      }\n\n      var rate = (0, Utils_1.getRangeValue)(splitOptions.rate.value);\n\n      for (var i = 0; i < rate; i++) {\n        this.container.particles.addSplitParticle(this);\n      }\n    }\n  }, {\n    key: \"calcPosition\",\n    value: function calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var _a, _b, _c, _d, _e, _f;\n\n      var _iterator5 = _createForOfIteratorHelper(container.plugins),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              plugin = _step5$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var canvasSize = container.canvas.size;\n      var pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n      var radius = this.getRadius();\n\n      var outModes = this.options.move.outModes,\n          fixHorizontal = function fixHorizontal(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceHorizontal],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: function setCb(value) {\n            return pos.x += value;\n          },\n          radius: radius\n        });\n      },\n          fixVertical = function fixVertical(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceVertical],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: function setCb(value) {\n            return pos.y += value;\n          },\n          radius: radius\n        });\n      };\n\n      fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n      fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n      fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n      fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n\n      if (this.checkOverlap(pos, tryCount)) {\n        return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"checkOverlap\",\n    value: function checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = this.options.collisions;\n      var radius = this.getRadius();\n\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n\n      var overlapOptions = collisionsOptions.overlap;\n\n      if (overlapOptions.enable) {\n        return false;\n      }\n\n      var retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      var overlaps = false;\n\n      var _iterator6 = _createForOfIteratorHelper(this.container.particles.array),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var particle = _step6.value;\n\n          if ((0, Utils_1.getDistance)(pos, particle.position) < radius + particle.getRadius()) {\n            overlaps = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return overlaps;\n    }\n  }, {\n    key: \"calculateVelocity\",\n    value: function calculateVelocity() {\n      var baseVelocity = (0, Utils_1.getParticleBaseVelocity)(this.direction);\n      var res = baseVelocity.copy();\n      var moveOptions = this.options.move;\n      var rad = Math.PI / 180 * moveOptions.angle.value;\n      var radOffset = Math.PI / 180 * moveOptions.angle.offset;\n      var range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n\n      if (!moveOptions.straight) {\n        res.angle += (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(range.left, range.right));\n      }\n\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= Math.random();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadShapeData\",\n    value: function loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n\n      if (shapeData) {\n        return (0, Utils_1.deepExtend)({}, shapeData instanceof Array ? (0, Utils_1.itemFromArray)(shapeData, this.id, reduceDuplicates) : shapeData);\n      }\n    }\n  }, {\n    key: \"loadLife\",\n    value: function loadLife() {\n      var container = this.container;\n      var particlesOptions = this.options;\n      var lifeOptions = particlesOptions.life;\n      var life = {\n        delay: container.retina.reduceFactor ? (0, Utils_1.getRangeValue)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        delayTime: 0,\n        duration: container.retina.reduceFactor ? (0, Utils_1.getRangeValue)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n        time: 0,\n        count: particlesOptions.life.count\n      };\n\n      if (life.duration <= 0) {\n        life.duration = -1;\n      }\n\n      if (life.count <= 0) {\n        life.count = -1;\n      }\n\n      return life;\n    }\n  }]);\n\n  return Particle;\n}();\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/tsparticles/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","fixOutMode","data","isInArray","outMode","checkModes","coord","maxCoord","radius","setCb","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","options","pathDelay","getValue","move","path","delay","zIndexValue","getRangeValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","getRangeMax","min","getRangeMin","loops","maxLoops","count","sizeAnimation","status","AnimationStatus","increasing","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","moveDecay","decay","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","width","height","pos","getPosition","distance","getDistance","center","RotateDirection","clockwise","counterClockwise","angle","acceleration","spinAcceleration","shadowColor","colorToRgb","shadow","color","updaters","updater","init","particleInit","plugins","plugin","particleCreated","isInsideCanvas","getRadius","canvasSize","delta","drawParticlePlugin","drawParticle","PI","getHslFromAnimation","roll","backColor","alter","rolled","floor","alterHsl","strokeColor","getFillColor","override","particleDestroyed","destroyOptions","destroy","mode","DestroyMode","split","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","Vector3d","create","outModes","fixHorizontal","OutMode","bounce","bounceHorizontal","fixVertical","bounceVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","array","particle","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","straight","setRangeValue","speed","length","deepExtend","lifeOptions","delayTime","duration","time"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nconst fixOutMode = (data) => {\n    if ((0, Utils_1.isInArray)(data.outMode, data.checkModes) || (0, Utils_1.isInArray)(data.outMode, data.checkModes)) {\n        if (data.coord > data.maxCoord - data.radius * 2) {\n            data.setCb(-data.radius);\n        }\n        else if (data.coord < data.radius * 2) {\n            data.setCb(data.radius);\n        }\n    }\n};\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const mainOptions = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? (0, Utils_1.itemFromArray)(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? (0, Utils_1.itemFromArray)(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = (0, Utils_1.getValue)(this.options.move.path.delay) * 1000;\n        const zIndexValue = (0, Utils_1.getRangeValue)(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: (0, Utils_1.getValue)(sizeOptions) * container.retina.pixelRatio,\n            max: (0, Utils_1.getRangeMax)(sizeRange) * pxRatio,\n            min: (0, Utils_1.getRangeMin)(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: sizeOptions.animation.count,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = (0, Utils_1.randomInRange)(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = (0, Utils_1.getParticleDirectionAngle)(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - (0, Utils_1.getRangeValue)(this.options.move.decay);\n        this.position = this.calcPosition(container, position, (0, Utils_1.clamp)(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = (0, Utils_1.getDistance)(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : (0, Utils_1.getRangeValue)(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = (0, Utils_1.colorToRgb)(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b, _c;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return (0, Utils_1.alterHsl)(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = (0, Utils_1.getRangeValue)(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d, _e, _f;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const radius = this.getRadius();\n        const outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceHorizontal],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceVertical],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n        fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n        fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n        fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions;\n        const radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if ((0, Utils_1.getDistance)(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = (0, Utils_1.getParticleBaseVelocity)(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return (0, Utils_1.deepExtend)({}, shapeData instanceof Array ? (0, Utils_1.itemFromArray)(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? (((0, Utils_1.getRangeValue)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? (((0, Utils_1.getRangeValue)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}