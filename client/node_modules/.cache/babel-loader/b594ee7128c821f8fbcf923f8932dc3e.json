{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Retina = void 0;\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Retina {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init() {\n    const container = this.container;\n    const options = container.actualOptions;\n    this.pixelRatio = !options.detectRetina || (0, Utils_1.isSsr)() ? 1 : window.devicePixelRatio;\n    const motionOptions = this.container.actualOptions.motion;\n\n    if (motionOptions && (motionOptions.disable || motionOptions.reduce.value)) {\n      if ((0, Utils_1.isSsr)() || typeof matchMedia === \"undefined\" || !matchMedia) {\n        this.reduceFactor = 1;\n      } else {\n        const mediaQuery = matchMedia(\"(prefers-reduced-motion: reduce)\");\n\n        if (mediaQuery) {\n          this.handleMotionChange(mediaQuery);\n\n          const handleChange = () => {\n            this.handleMotionChange(mediaQuery);\n            container.refresh().catch(() => {});\n          };\n\n          if (mediaQuery.addEventListener !== undefined) {\n            mediaQuery.addEventListener(\"change\", handleChange);\n          } else if (mediaQuery.addListener !== undefined) {\n            mediaQuery.addListener(handleChange);\n          }\n        }\n      }\n    } else {\n      this.reduceFactor = 1;\n    }\n\n    const ratio = this.pixelRatio;\n\n    if (container.canvas.element) {\n      const element = container.canvas.element;\n      container.canvas.size.width = element.offsetWidth * ratio;\n      container.canvas.size.height = element.offsetHeight * ratio;\n    }\n\n    const particles = options.particles;\n    this.attractDistance = particles.move.attract.distance * ratio;\n    this.linksDistance = particles.links.distance * ratio;\n    this.linksWidth = particles.links.width * ratio;\n    this.sizeAnimationSpeed = particles.size.animation.speed * ratio;\n    this.maxSpeed = particles.move.gravity.maxSpeed * ratio;\n\n    if (particles.orbit.radius !== undefined) {\n      this.orbitRadius = particles.orbit.radius * this.container.retina.pixelRatio;\n    }\n\n    const modes = options.interactivity.modes;\n    this.connectModeDistance = modes.connect.distance * ratio;\n    this.connectModeRadius = modes.connect.radius * ratio;\n    this.grabModeDistance = modes.grab.distance * ratio;\n    this.repulseModeDistance = modes.repulse.distance * ratio;\n    this.bounceModeDistance = modes.bounce.distance * ratio;\n    this.attractModeDistance = modes.attract.distance * ratio;\n    this.slowModeRadius = modes.slow.radius * ratio;\n    this.bubbleModeDistance = modes.bubble.distance * ratio;\n\n    if (modes.bubble.size) {\n      this.bubbleModeSize = modes.bubble.size * ratio;\n    }\n  }\n\n  initParticle(particle) {\n    const options = particle.options;\n    const ratio = this.pixelRatio;\n    const moveDistance = options.move.distance;\n    const props = particle.retina;\n    props.attractDistance = options.move.attract.distance * ratio;\n    props.linksDistance = options.links.distance * ratio;\n    props.linksWidth = options.links.width * ratio;\n    props.moveDrift = (0, Utils_1.getRangeValue)(options.move.drift) * ratio;\n    props.moveSpeed = (0, Utils_1.getRangeValue)(options.move.speed) * ratio;\n    props.sizeAnimationSpeed = options.size.animation.speed * ratio;\n\n    if (particle.spin) {\n      props.spinAcceleration = (0, Utils_1.getRangeValue)(options.move.spin.acceleration) * ratio;\n    }\n\n    const maxDistance = props.maxDistance;\n    maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n    maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n    props.maxSpeed = options.move.gravity.maxSpeed * ratio;\n  }\n\n  handleMotionChange(mediaQuery) {\n    const options = this.container.actualOptions;\n\n    if (mediaQuery.matches) {\n      const motion = options.motion;\n      this.reduceFactor = motion.disable ? 0 : motion.reduce.value ? 1 / motion.reduce.factor : 1;\n    } else {\n      this.reduceFactor = 1;\n    }\n  }\n\n}\n\nexports.Retina = Retina;","map":{"version":3,"sources":["/Users/emad/Desktop/emadsaeed.com/client/node_modules/tsparticles/Core/Retina.js"],"names":["Object","defineProperty","exports","value","Retina","Utils_1","require","constructor","container","init","options","actualOptions","pixelRatio","detectRetina","isSsr","window","devicePixelRatio","motionOptions","motion","disable","reduce","matchMedia","reduceFactor","mediaQuery","handleMotionChange","handleChange","refresh","catch","addEventListener","undefined","addListener","ratio","canvas","element","size","width","offsetWidth","height","offsetHeight","particles","attractDistance","move","attract","distance","linksDistance","links","linksWidth","sizeAnimationSpeed","animation","speed","maxSpeed","gravity","orbit","radius","orbitRadius","retina","modes","interactivity","connectModeDistance","connect","connectModeRadius","grabModeDistance","grab","repulseModeDistance","repulse","bounceModeDistance","bounce","attractModeDistance","slowModeRadius","slow","bubbleModeDistance","bubble","bubbleModeSize","initParticle","particle","moveDistance","props","moveDrift","getRangeValue","drift","moveSpeed","spin","spinAcceleration","acceleration","maxDistance","horizontal","vertical","matches","factor"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Retina = void 0;\nconst Utils_1 = require(\"../Utils\");\nclass Retina {\n    constructor(container) {\n        this.container = container;\n    }\n    init() {\n        const container = this.container;\n        const options = container.actualOptions;\n        this.pixelRatio = !options.detectRetina || (0, Utils_1.isSsr)() ? 1 : window.devicePixelRatio;\n        const motionOptions = this.container.actualOptions.motion;\n        if (motionOptions && (motionOptions.disable || motionOptions.reduce.value)) {\n            if ((0, Utils_1.isSsr)() || typeof matchMedia === \"undefined\" || !matchMedia) {\n                this.reduceFactor = 1;\n            }\n            else {\n                const mediaQuery = matchMedia(\"(prefers-reduced-motion: reduce)\");\n                if (mediaQuery) {\n                    this.handleMotionChange(mediaQuery);\n                    const handleChange = () => {\n                        this.handleMotionChange(mediaQuery);\n                        container.refresh().catch(() => {\n                        });\n                    };\n                    if (mediaQuery.addEventListener !== undefined) {\n                        mediaQuery.addEventListener(\"change\", handleChange);\n                    }\n                    else if (mediaQuery.addListener !== undefined) {\n                        mediaQuery.addListener(handleChange);\n                    }\n                }\n            }\n        }\n        else {\n            this.reduceFactor = 1;\n        }\n        const ratio = this.pixelRatio;\n        if (container.canvas.element) {\n            const element = container.canvas.element;\n            container.canvas.size.width = element.offsetWidth * ratio;\n            container.canvas.size.height = element.offsetHeight * ratio;\n        }\n        const particles = options.particles;\n        this.attractDistance = particles.move.attract.distance * ratio;\n        this.linksDistance = particles.links.distance * ratio;\n        this.linksWidth = particles.links.width * ratio;\n        this.sizeAnimationSpeed = particles.size.animation.speed * ratio;\n        this.maxSpeed = particles.move.gravity.maxSpeed * ratio;\n        if (particles.orbit.radius !== undefined) {\n            this.orbitRadius = particles.orbit.radius * this.container.retina.pixelRatio;\n        }\n        const modes = options.interactivity.modes;\n        this.connectModeDistance = modes.connect.distance * ratio;\n        this.connectModeRadius = modes.connect.radius * ratio;\n        this.grabModeDistance = modes.grab.distance * ratio;\n        this.repulseModeDistance = modes.repulse.distance * ratio;\n        this.bounceModeDistance = modes.bounce.distance * ratio;\n        this.attractModeDistance = modes.attract.distance * ratio;\n        this.slowModeRadius = modes.slow.radius * ratio;\n        this.bubbleModeDistance = modes.bubble.distance * ratio;\n        if (modes.bubble.size) {\n            this.bubbleModeSize = modes.bubble.size * ratio;\n        }\n    }\n    initParticle(particle) {\n        const options = particle.options;\n        const ratio = this.pixelRatio;\n        const moveDistance = options.move.distance;\n        const props = particle.retina;\n        props.attractDistance = options.move.attract.distance * ratio;\n        props.linksDistance = options.links.distance * ratio;\n        props.linksWidth = options.links.width * ratio;\n        props.moveDrift = (0, Utils_1.getRangeValue)(options.move.drift) * ratio;\n        props.moveSpeed = (0, Utils_1.getRangeValue)(options.move.speed) * ratio;\n        props.sizeAnimationSpeed = options.size.animation.speed * ratio;\n        if (particle.spin) {\n            props.spinAcceleration = (0, Utils_1.getRangeValue)(options.move.spin.acceleration) * ratio;\n        }\n        const maxDistance = props.maxDistance;\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n        props.maxSpeed = options.move.gravity.maxSpeed * ratio;\n    }\n    handleMotionChange(mediaQuery) {\n        const options = this.container.actualOptions;\n        if (mediaQuery.matches) {\n            const motion = options.motion;\n            this.reduceFactor = motion.disable ? 0 : motion.reduce.value ? 1 / motion.reduce.factor : 1;\n        }\n        else {\n            this.reduceFactor = 1;\n        }\n    }\n}\nexports.Retina = Retina;\n"]},"metadata":{},"sourceType":"script"}