{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Attractor = void 0;\n\nconst Enums_1 = require(\"../../../Enums\");\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\n\nconst Vector_1 = require(\"../../../Core/Particle/Vector\");\n\nclass Attractor extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events;\n\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return (0, Utils_1.isInArray)(Enums_1.HoverMode.attract, hoverMode) || (0, Utils_1.isInArray)(Enums_1.ClickMode.attract, clickMode);\n  }\n\n  reset() {}\n\n  interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent,\n          events = options.interactivity.events,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          clickEnabled = events.onClick.enable,\n          clickMode = events.onClick.mode;\n\n    if (mouseMoveStatus && hoverEnabled && (0, Utils_1.isInArray)(Enums_1.HoverMode.attract, hoverMode)) {\n      this.hoverAttract();\n    } else if (clickEnabled && (0, Utils_1.isInArray)(Enums_1.ClickMode.attract, clickMode)) {\n      this.clickAttract();\n    }\n  }\n\n  hoverAttract() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const attractRadius = container.retina.attractModeDistance;\n    this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n\n  processAttract(position, attractRadius, area) {\n    const container = this.container;\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    const query = container.particles.quadTree.query(area);\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = (0, Utils_1.getDistances)(particle.position, position);\n      const velocity = attractOptions.speed * attractOptions.factor;\n      const attractFactor = (0, Utils_1.clamp)((0, Utils_1.calcEasing)(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n      const normVec = Vector_1.Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n      particle.position.subFrom(normVec);\n    }\n  }\n\n  clickAttract() {\n    const container = this.container;\n\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n\n      container.attract.count++;\n\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const attractRadius = container.retina.attractModeDistance;\n      this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n\n    return;\n  }\n\n}\n\nexports.Attractor = Attractor;","map":{"version":3,"sources":["/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/tsparticles/Interactions/External/Attract/Attractor.js"],"names":["Object","defineProperty","exports","value","Attractor","Enums_1","require","Utils_1","ExternalInteractorBase_1","Vector_1","ExternalInteractorBase","constructor","container","isEnabled","options","actualOptions","mouse","interactivity","events","position","onHover","enable","clickPosition","onClick","hoverMode","mode","clickMode","isInArray","HoverMode","attract","ClickMode","reset","interact","mouseMoveStatus","status","Constants","mouseMoveEvent","hoverEnabled","clickEnabled","hoverAttract","clickAttract","mousePos","attractRadius","retina","attractModeDistance","processAttract","Circle","x","y","area","attractOptions","modes","query","particles","quadTree","particle","dx","dy","distance","getDistances","velocity","speed","factor","attractFactor","clamp","calcEasing","easing","maxSpeed","normVec","Vector","create","subFrom","finish","count","clicking"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Attractor = void 0;\nconst Enums_1 = require(\"../../../Enums\");\nconst Utils_1 = require(\"../../../Utils\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\nconst Vector_1 = require(\"../../../Core/Particle/Vector\");\nclass Attractor extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return (0, Utils_1.isInArray)(Enums_1.HoverMode.attract, hoverMode) || (0, Utils_1.isInArray)(Enums_1.ClickMode.attract, clickMode);\n    }\n    reset() {\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && (0, Utils_1.isInArray)(Enums_1.HoverMode.attract, hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && (0, Utils_1.isInArray)(Enums_1.ClickMode.attract, clickMode)) {\n            this.clickAttract();\n        }\n    }\n    hoverAttract() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const attractRadius = container.retina.attractModeDistance;\n        this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container;\n        const attractOptions = container.actualOptions.interactivity.modes.attract;\n        const query = container.particles.quadTree.query(area);\n        for (const particle of query) {\n            const { dx, dy, distance } = (0, Utils_1.getDistances)(particle.position, position);\n            const velocity = attractOptions.speed * attractOptions.factor;\n            const attractFactor = (0, Utils_1.clamp)((0, Utils_1.calcEasing)(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n            const normVec = Vector_1.Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n            particle.position.subFrom(normVec);\n        }\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition;\n            if (!mousePos) {\n                return;\n            }\n            const attractRadius = container.retina.attractModeDistance;\n            this.processAttract(mousePos, attractRadius, new Utils_1.Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n}\nexports.Attractor = Attractor;\n"]},"metadata":{},"sourceType":"script"}