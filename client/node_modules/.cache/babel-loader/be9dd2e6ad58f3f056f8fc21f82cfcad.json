{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nfunction applyDistance(particle) {\n  const initialPosition = particle.initialPosition;\n  const {\n    dx,\n    dy\n  } = (0, Utils_1.getDistances)(initialPosition, particle.position);\n  const dxFixed = Math.abs(dx),\n        dyFixed = Math.abs(dy);\n  const hDistance = particle.retina.maxDistance.horizontal;\n  const vDistance = particle.retina.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n          vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\n\nclass Mover {\n  constructor(container) {\n    this.container = container;\n  }\n\n  move(particle, delta) {\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(particle, delta);\n    this.moveParallax(particle);\n  }\n\n  moveParticle(particle, delta) {\n    var _a, _b, _c;\n\n    var _d, _e;\n\n    const particleOptions = particle.options;\n    const moveOptions = particleOptions.move;\n\n    if (!moveOptions.enable) {\n      return;\n    }\n\n    const container = this.container,\n          slowFactor = this.getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = (0, Utils_1.getRangeValue)(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = (0, Utils_1.getRangeValue)(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = (0, Utils_1.getRangeMax)(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          diffFactor = 2,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n          moveSpeed = baseSpeed * speedFactor;\n    this.applyPath(particle, delta);\n    const gravityOptions = moveOptions.gravity;\n    const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n    if (gravityOptions.enable && moveSpeed) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n\n    if (moveDrift && moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    const decay = particle.moveDecay;\n\n    if (decay != 1) {\n      particle.velocity.multTo(decay);\n    }\n\n    const velocity = particle.velocity.mult(moveSpeed);\n    const maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n    if (gravityOptions.enable && gravityOptions.maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n      velocity.y = gravityFactor * maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    const zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n\n    if (moveOptions.spin.enable) {\n      this.spin(particle, moveSpeed);\n    } else {\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n\n      particle.position.addTo(velocity);\n\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    applyDistance(particle);\n  }\n\n  spin(particle, moveSpeed) {\n    const container = this.container;\n\n    if (!particle.spin) {\n      return;\n    }\n\n    const updateFunc = {\n      x: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n      y: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n\n    if (particle.spin.radius > maxCanvasSize / 2) {\n      particle.spin.radius = maxCanvasSize / 2;\n      particle.spin.acceleration *= -1;\n    } else if (particle.spin.radius < 0) {\n      particle.spin.radius = 0;\n      particle.spin.acceleration *= -1;\n    }\n\n    particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n  }\n\n  applyPath(particle, delta) {\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n\n    if (!pathEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n\n    const path = container.pathGenerator.generate(particle);\n    particle.velocity.addTo(path);\n\n    if (pathOptions.clamp) {\n      particle.velocity.x = (0, Utils_1.clamp)(particle.velocity.x, -1, 1);\n      particle.velocity.y = (0, Utils_1.clamp)(particle.velocity.y, -1, 1);\n    }\n\n    particle.lastPathTime -= particle.pathDelay;\n  }\n\n  moveParallax(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if ((0, Utils_1.isSsr)() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = (0, Utils_1.isInArray)(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = particle.getPosition();\n    const dist = (0, Utils_1.getDistance)(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/emad/Desktop/My Website 2022/emadsaeed.com/client/node_modules/tsparticles/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","applyDistance","particle","initialPosition","dx","dy","getDistances","position","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","constructor","container","move","delta","destroyed","moveParticle","moveParallax","_a","_b","_c","_d","_e","particleOptions","options","moveOptions","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","getRangeValue","speed","pixelRatio","reduceFactor","moveDrift","drift","maxSize","getRangeMax","size","sizeFactor","getRadius","diffFactor","speedFactor","factor","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","spin","addTo","vibrate","sin","cos","updateFunc","direction","RotateDirection","clockwise","center","radius","angle","maxCanvasSize","max","canvas","width","height","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","pathGenerator","generate","clamp","actualOptions","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","getDistance","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = (0, Utils_1.getDistances)(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.retina.maxDistance.horizontal;\n    const vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nclass Mover {\n    constructor(container) {\n        this.container = container;\n    }\n    move(particle, delta) {\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(particle, delta);\n        this.moveParallax(particle);\n    }\n    moveParticle(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options;\n        const moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = this.container, slowFactor = this.getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = (0, Utils_1.getRangeValue)(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = (0, Utils_1.getRangeValue)(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = (0, Utils_1.getRangeMax)(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, diffFactor = 2, speedFactor = (sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, moveSpeed = baseSpeed * speedFactor;\n        this.applyPath(particle, delta);\n        const gravityOptions = moveOptions.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            gravityOptions.maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            this.spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n    spin(particle, moveSpeed) {\n        const container = this.container;\n        if (!particle.spin) {\n            return;\n        }\n        const updateFunc = {\n            x: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n            y: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos,\n        };\n        particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n        particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n        particle.spin.radius += particle.spin.acceleration;\n        const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n        if (particle.spin.radius > maxCanvasSize / 2) {\n            particle.spin.radius = maxCanvasSize / 2;\n            particle.spin.acceleration *= -1;\n        }\n        else if (particle.spin.radius < 0) {\n            particle.spin.radius = 0;\n            particle.spin.acceleration *= -1;\n        }\n        particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n    }\n    applyPath(particle, delta) {\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        const path = container.pathGenerator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = (0, Utils_1.clamp)(particle.velocity.x, -1, 1);\n            particle.velocity.y = (0, Utils_1.clamp)(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        if ((0, Utils_1.isSsr)() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = (0, Utils_1.isInArray)(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = particle.getPosition();\n        const dist = (0, Utils_1.getDistance)(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}