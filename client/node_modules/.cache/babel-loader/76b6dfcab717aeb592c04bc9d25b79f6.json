{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nconst Enums_1 = require(\"./Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nconst Enums_2 = require(\"../../Enums\");\n\nconst utils_1 = require(\"./utils\");\n\nclass PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  async initAsync(options) {\n    this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n    const polygonMaskOptions = this.options;\n    this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n    if (polygonMaskOptions.enable) {\n      await this.initRawData();\n    }\n  }\n\n  resize() {\n    const container = this.container;\n    const options = this.options;\n\n    if (!(options.enable && options.type !== Enums_1.Type.none)) {\n      return;\n    }\n\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n\n    this.redrawTimeout = window.setTimeout(async () => {\n      await this.initRawData(true);\n      container.particles.redraw();\n    }, 250);\n  }\n\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n\n  particlesInitialization() {\n    const options = this.options;\n\n    if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n      this.drawPoints();\n      return true;\n    }\n\n    return false;\n  }\n\n  particlePosition(position) {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n\n    return (0, Utils_1.deepExtend)({}, position ? position : this.randomPoint());\n  }\n\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n  }\n\n  draw(context) {\n    var _a;\n\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    const options = this.options;\n    const polygonDraw = options.draw;\n\n    if (!(options.enable && polygonDraw.enable)) {\n      return;\n    }\n\n    const rawData = this.raw;\n\n    for (const path of this.paths) {\n      const path2d = path.path2d;\n      const path2dSupported = this.path2DSupported;\n\n      if (!context) {\n        continue;\n      }\n\n      if (path2dSupported && path2d && this.offset) {\n        (0, utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        (0, utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n\n  polygonBounce(particle, _delta, direction) {\n    const options = this.options;\n\n    if (!this.raw || !options.enable || direction !== Enums_2.OutModeDirection.top) {\n      return false;\n    }\n\n    if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n              pj = this.raw[j];\n        closest = (0, utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n        const dist = (0, Utils_1.getDistances)(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n\n        if (dist.distance < radius) {\n          (0, utils_1.segmentBounce)(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n      const dist = (0, Utils_1.getDistance)(particle.initialPosition, particle.getPosition());\n\n      if (dist > this.polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  checkInsidePolygon(position) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = this.options;\n\n    if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Utils_1.Constants.noPolygonFound);\n    }\n\n    const canvasSize = container.canvas.size;\n    const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n    const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i];\n      const pj = this.raw[j];\n      const intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n  }\n\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const container = this.container;\n    const options = this.options;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xml, \"image/svg+xml\");\n    const svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n\n    this.paths = [];\n\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n\n    const pxRatio = container.retina.pixelRatio;\n    const scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return (0, utils_1.parsePaths)(this.paths, scale, this.offset);\n  }\n\n  async downloadSvgPath(svgUrl, force) {\n    const options = this.options;\n    const url = svgUrl || options.url;\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (!url || this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const req = await fetch(url);\n\n    if (!req.ok) {\n      throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n    }\n\n    return this.parseSvgPath(await req.text(), force);\n  }\n\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n\n  randomPoint() {\n    const container = this.container;\n    const options = this.options;\n    let position;\n\n    if (options.type === Enums_1.Type.inline) {\n      switch (options.inline.arrangement) {\n        case Enums_1.InlineArrangement.randomPoint:\n          position = this.getRandomPoint();\n          break;\n\n        case Enums_1.InlineArrangement.randomLength:\n          position = this.getRandomPointByLength();\n          break;\n\n        case Enums_1.InlineArrangement.equidistant:\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n\n        case Enums_1.InlineArrangement.onePerPoint:\n        case Enums_1.InlineArrangement.perPoint:\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = (0, Utils_1.itemFromArray)(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  getRandomPointByLength() {\n    var _a, _b, _c;\n\n    const options = this.options;\n\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const path = (0, Utils_1.itemFromArray)(this.paths);\n    const distance = Math.floor(Math.random() * path.length) + 1;\n    const point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    const options = this.container.actualOptions;\n    const polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    let offset = 0;\n    let point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n    const distance = totalLength / options.particles.number.value;\n\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  createPath2D() {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n      if (pathData) {\n        const path2d = new Path2D(pathData);\n        const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        const finalPath = new Path2D();\n        const transform = matrix.scale(options.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n\n  async initRawData(force) {\n    const options = this.options;\n\n    if (options.url) {\n      this.raw = await this.downloadSvgPath(options.url, force);\n    } else if (options.data) {\n      const data = options.data;\n      let svg;\n\n      if (typeof data !== \"string\") {\n        const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n      } else {\n        svg = data;\n      }\n\n      this.raw = this.parseSvgPath(svg, force);\n    }\n\n    this.createPath2D();\n  }\n\n}\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"sources":["/Users/emad/Desktop/emadsaeed.com/client/node_modules/tsparticles/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["Object","defineProperty","exports","value","PolygonMaskInstance","Enums_1","require","Utils_1","PolygonMask_1","Enums_2","utils_1","constructor","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","paths","particlesInitialization","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","particlePosition","position","_a","_b","length","deepExtend","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","context","polygonDraw","rawData","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","_delta","OutModeDirection","top","inside","outside","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","calcClosestPtOnSegment","dist","getDistances","distance","segmentBounce","velocity","undefined","factor","x","y","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","data","Array","map","t","join","namespaces"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nconst Enums_2 = require(\"../../Enums\");\nconst utils_1 = require(\"./utils\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return (0, Utils_1.deepExtend)({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                (0, utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                (0, utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== Enums_2.OutModeDirection.top) {\n            return false;\n        }\n        if (options.type === Enums_1.Type.inside || options.type === Enums_1.Type.outside) {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = (0, utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n                const dist = (0, Utils_1.getDistances)(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    (0, utils_1.segmentBounce)(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = (0, Utils_1.getDistance)(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return (0, utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options;\n        const url = svgUrl || options.url;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = (0, Utils_1.itemFromArray)(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = (0, Utils_1.itemFromArray)(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"]},"metadata":{},"sourceType":"script"}